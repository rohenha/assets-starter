
/// calculate col percent
///
/// @param {integer (unitless)} $col
///   The number of col width
/// @return {number (percent)} `col percent`.
@function col($col) {
  @return (100% * ($col * ($column-width - $column-gutter))) / $row-width;
}

/// calculate col percent in subrow
///
/// @param {integer (unitless)} $col
///   The number of col width
/// @param {integer (unitless)} $container
///   The number of the subgrid
/// @return {number (percent)} `col percent`.
@function subcol($col, $container) {
  @return (100% * ($col / $container));
}

/// render grid position of an element
///
/// @param {integer (unitless)} $width
///   The width on the grid
/// @param {integer (unitless)} $offset
///   The offset on the grid
/// @return {grid} `grid positon`.

@mixin gridp($width, $offset) {
  grid-column: #{$offset} / #{$offset + $width};
}

@function gridcol($cols, $parent: $total-columns) {
  $colw: 1 / $parent * 100;
  $colr: ($row-width + $column-gutter) / $row-width;
  $width: $colw * $cols * $colr * 1%;
  @return calc(#{$width} - #{$column-gutter});
}

@function gridpd($cols) {
  $colw: 1 / $total-columns * 100;
  $colr: ($row-width + $column-gutter) / $row-width;
  $width: $colw * $cols * $colr * 1%;
  @return $width;
}
